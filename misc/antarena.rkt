#lang racket

(define (board width height positions)
  (define (eq-pos? p1 p2)
    (and (= (car p1) (car p2)) (= (cadr p1) (cadr p2))))
  (define (draw)
    (define (print-head len)
      (if (= len 0)
          (display "\n")
          (begin
            (display "--")
            (print-head (- len 1)))))
    (define (print-pos pos)
      (define (do-print-pos rest)
        (if (empty? rest)
            (display "  ")
            (if (eq-pos? (car rest) pos)
                (display "X ")
                (do-print-pos (cdr rest)))))
      (do-print-pos positions))
    (define (print-row x)
      (define (print-row-rest y)
        (if (= y width)
            (display "|\n")
            (begin
              (print-pos (list x y))
              (print-row-rest (+ y 1)))))
      (begin
        (display "|")
        (print-row-rest 0)))
    (define (print-rows x)
        (if (= x height)
            null
            (begin
              (print-row x)
              (print-rows (+ x 1)))))
    (display " ")
    (print-head width)
    (print-rows 0)
    (display " ")
    (print-head width))
  (define (add pos)
    (set! positions (cons pos positions)))
  (define (rm pos)
    (define (do-rm prev rest)
      (cond ((empty? rest) null)
            ((eq-pos? (car rest) pos)
             (set! positions (append prev (cdr rest))))
            (else
             (do-rm (append prev (list (car rest))) (cdr rest)))))
    (do-rm '() positions))
  (define (dispatch cmd)
    (cond ((eq? cmd 'draw) draw)
          ((eq? cmd 'add) add)
          ((eq? cmd 'rm) rm)
          (else (lambda (pos) "Invalid command"))))
  dispatch)

(define b (board 8 5 '((1 3))))
((b 'add) '(4 7))
((b 'rm) '(1 3))
((b 'draw))
